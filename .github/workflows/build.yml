name: "Build kernels"
on:
  workflow_dispatch:
    inputs:
      BR:
        description: 'Kernel Branch'
        required: true
        default: 'KSUN'        
      TREE:
        description: 'Kernel Tree'
        required: true
        default: 'https://github.com/UdyneO2/kernel_realme_RMX2195'
      AK3:
        description: 'Anykernel Tree'
        required: true
        default: 'https://github.com/UdyneO2/Anykernel'
      CLANG:
        description: 'clang compiler'
        required: true
        default: 'https://github.com/techyminati/android_prebuilts_clang_host_linux-x86_clang-6443078'
      AK3_BR:
        description: 'AK3 Branch'
        required: true
        default: 'RMX2195'
      NAME:
        description: 'Specify your kernel NAME.'
        required: true
        default: 'RMX2195'
      DEVICE:
        description: 'Specify your Device Codename.'
        required: true
        default: 'RMX2195'
      KSU:
        description: 'KernelSU'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false
      REL:
        description: 'Release repo'
        required: true
        default: 'UdyneO2/kernel_realme_RMX2195'
jobs:
  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: false
    env:
      KDIR: dir_${{ inputs.NAME}}
      KNAME: ${{ inputs.NAME}}
      kernelRepo: ${{ inputs.TREE }}
      kernelBranch: ${{ inputs.BR }}
      DEVICE: ${{ inputs.DEVICE }}
      ANYKERNEL_NAME: Anykernel3
      ANYKERNEL_SOURCE: ${{ inputs.AK3 }}
      ANYKERNEL_SOURCE_BRANCH: ${{ inputs.AK3_BR }}
      DEFCONFIG_NAME: vendor/${{ inputs.DEVICE }}_defconfig
      withKSUN: ${{ inputs.KSU }}
      ARCH: arm64
      OUT_DIR: out
      XCLANG: ${{ inputs.CLANG }}
      ROOT: /home/runner/work
      REL: ${{ inputs.REL }}
    steps:
      - name: "✨ Create working dir"
        run: mkdir -p $KDIR

      - name: "⭐ Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt update && sudo apt install bc  bison  build-essential  ccache   curl  flex  git libelf-dev libssl-dev lzop  python3  rsync unzip  zlib1g-dev gcc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi make libncurses5-dev libncursesw5-dev wget
      - name: "🌟 Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.KDIR }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $KNAME --depth=1
          
      - name: "😋 Update KernelSU-Next"
        working-directory: ./${{ env.KDIR }}/${{ env.KNAME }}
        if: ${{ env.withKSUN == 'true' }}
        run: |
          echo-e "Will Supported soon for any ksu"
          cat ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }} | grep KSU

      - name: "🎶 Build kernel"
        working-directory: ./${{ env.KDIR }}/${{ env.KNAME }}
        run: |
          export KBUILD_BUILD_USER="mnrdnn"
          export KBUILD_BUILD_HOST="github"
          git clone $XCLANG ~/toolchains/clang --depth=1 
          export CLANG_PATH=~/toolchains/clang/bin
          export PATH=${CLANG_PATH}:${PATH}
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CLANG_TRIPLE=aarch64-linux-gnu-
          echo "PATH Variable: $PATH"
          echo
          echo "Set DEFCONFIG"
          echo 
          make CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip O=out ${{ env.DEFCONFIG_NAME }}
          echo
          echo "Set DEFCONFIG"
          echo 
          make CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip O=out -j$(nproc --all)
          echo
          echo "Build Succesfully"

      - name: "📦 Package kernel with AnyKernel3"
        working-directory: ./${{ env.KDIR }}
        run: |
          git clone --depth=1 $ANYKERNEL_SOURCE -b $ANYKERNEL_SOURCE_BRANCH $ROOT/$KDIR/$ANYKERNEL_NAME && rm -rf $ROOT/$KDIR/$ANYKERNEL_NAME/.git $ROOT/$KDIR/$ANYKERNEL_NAME/.github $ROOT/$KDIR/$ANYKERNEL_NAME/LICENSE $ROOT/$KDIR/$ANYKERNEL_NAME/README.md
          if [[ -f $ROOT/$KDIR/$KNAME/$ROOT/$KDIR/$KNAME/$OUT_DIR/arch/$ARCH/boot/Image.gz ]]; then
            cp $ROOT/$KDIR/$KNAME/$OUT_DIR/arch/$ARCH/boot/Image.gz $ROOT/$KDIR/$ANYKERNEL_NAME/Image.gz
            echo -e "Image.gz found"
          else
            echo -e "Image.gz not found"
            echo -e "Do find"
            find $ROOT/$KDIR/$KNAME -type f 2>/dev/null | grep "Image.gz"
          fi
          if [[ -f $ROOT/$KDIR/$KNAME/$OUT_DIR/arch/$ARCH/boot/Image ]]; then
            cp $ROOT/$KDIR/$KNAME/$OUT_DIR/arch/$ARCH/boot/Image $ROOT/$KDIR/$ANYKERNEL_NAME/Image
          fi
          cd $ROOT/$KDIR/$ANYKERNEL_NAME && zip -r9 Release-$KNAME-$DEVICE.zip *
          
          mkdir -p $ROOT/$KDIR/release
          mv Release-$KNAME-$DEVICE.zip $ROOT/$KDIR/release/Release-$KNAME-$DEVICE.zip
          echo ""
          echo -e "Upload Anykernel3.zip"
          echo ""
          ls $ANYKERNEL_NAME
      - uses: softprops/action-gh-release@v2
        with:
         token: ${{ secrets.GH_TOKEN }}
         repository: $REL
         files: |
           $ROOT/$KDIR/release/Release-$KNAME-$DEVICE.zip
         name: Update Kernel Build | ${{ env.ANYKERNEL_NAME }}-$DEVICE
         tag_name: ${{ env.kernel }}/
         body: |
          ### Release Notes:
          * Kernel compiled using clang 11.0.1
          * flash at your own risk.
          * Thanks [github](https://github.com)
          * Use [branch](https://github.com/UdyneO2/kernel_realme_RMX2195/tree/KSUN)
          
           ### Changelog ;
          * - Add KernelSU-Next v1.0.8 Support
          * - Add Susfs 1.5.8 support : Thanks to [sidex15](https://t.me/sidex15) - [Kernel Source](https://github.com/sidex15/kernel_realme_sm4250)
          * - Enable uclamp
          * - Add more gpucc-size
          * - bugs? tell [me](https://t.me/mnrdnn)
      - uses: actions/upload-artifact@v4
        with:
          name: Release-$KNAME-$DEVICE
          path: $ROOT/$KDIR/$ANYKERNEL_NAME/*

