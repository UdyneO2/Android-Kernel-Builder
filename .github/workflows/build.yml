name: "Build kernels"

env:
  CONFIGURATION: "repos.json"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat  ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}

      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}

      ANYKERNEL_NAME: ${{ matrix.repos.anykernelSource.name }}
      ANYKERNEL_SOURCE: ${{ matrix.repos.anykernelSource.repo }}
      ANYKERNEL_SOURCE_BRANCH: ${{ matrix.repos.anykernelSource.branch }}

      DEFCONFIG_NAME: vendor/${{ matrix.repos.kernelSource.device }}_defconfig

      withKSUN: ${{ matrix.repos.withKSUN }}
      
      
    steps:
      - name: "‚ú® Create working dir"
        run: mkdir -p $kernelDir

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt update && sudo apt install bc  bison  build-essential  ccache   curl  flex  git libelf-dev libssl-dev lzop  python3  rsync unzip  zlib1g-dev gcc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi make libncurses5-dev libncursesw5-dev wget
      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1
          
      - name: "üòã Update KernelSU-Next"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKSUN == 'true' }}
        run: |
          cat ./arch/arm64/configs/${{ env.DEFCONFIG_NAME }} | grep KSU

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          export KBUILD_BUILD_USER="mnrdnn"
          export KBUILD_BUILD_HOST="github"
          git clone https://github.com/techyminati/android_prebuilts_clang_host_linux-x86_clang-6443078 ~/toolchains/clang --depth=1 
          export CLANG_PATH=~/toolchains/clang/bin
          export PATH=${CLANG_PATH}:${PATH}
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CLANG_TRIPLE=aarch64-linux-gnu-
          echo "PATH Variable: $PATH"
          make clean
          rm -rf out
          mkdir -p out
          echo
          echo "Set DEFCONFIG"
          echo 
          make CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip O=out ${{ env.DEFCONFIG_NAME }}
          echo
          echo "Set DEFCONFIG"
          echo 
          make CC=clang AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip O=out -j$(nproc --all)
          echo
          echo "Build Succesfully"

      - name: "üì¶ Package kernel with AnyKernel3"
        working-directory: ./${{ env.kernelDir }}
        run: |
          ARCH=arm64
          OUT_DIR="$(pwd)/KSUN/out" 
          git clone --depth=1 $ANYKERNEL_SOURCE -b $ANYKERNEL_SOURCE_BRANCH $ANYKERNEL_NAME && rm -rf $ANYKERNEL_NAME/.git $ANYKERNEL_NAME/.github $ANYKERNEL_NAME/LICENSE $ANYKERNEL_NAME/README.md
          if [[ -f $OUT_DIR/arch/$ARCH/boot/Image.gz ]]; then
            cp $OUT_DIR/arch/$ARCH/boot/Image.gz $ANYKERNEL_NAME/Image.gz
            echo -e "Image.gz found"
          else
            echo -e "Image.gz not found"
            echo -e "Do find"
            find . -type f 2>/dev/null | grep "Image.gz"
          fi
          if [[ -f $OUT_DIR/arch/$ARCH/boot/Image ]]; then
            cp $OUT_DIR/arch/$ARCH/boot/Image $ANYKERNEL_NAME/Image
          fi
          cd ${{ env.ANYKERNEL_NAME }}/
          zip -r9 Release-${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}.zip *
          mkdir ~/Rel
          mv Release-${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}.zip ~/Rel/Release-${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}.zip
          echo -e "Upload Anykernel3.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: Release-${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}
          path: ./

      - name: "üíõ Upload Image"
        run: |
           ARCH="arm64"
      - uses: actions/upload-artifact@v4
        with:
          name: Image(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}/out/arch/$ARCH/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíô Upload Image.gz"
        run: |
           ARCH="arm64"
      - uses: actions/upload-artifact@v4
        with:
          name: Image.gz(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ~/$ANYKERNEL_NAME/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíú Upload dtb"
        run: |
           ARCH="arm64"
      - uses: actions/upload-artifact@v4
        with:
          name: dtb(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}/out/arch/$ARCH/boot/dts/vendor/qcom/*
          if-no-files-found: ignore
          retention-days: 7

     # - name: "‚ù§Ô∏è Upload dtbo.img"
       # uses: actions/upload-artifact@v4
       # with:
        #  name: dtbo.img(${{ env.kernelDevice }}-${{ env.kernelName }}-${{ env.kernelBranch }})
        #  path: ./${{ env.kernelDir }}/${{ env.kernelName }}/out/arch/${{ env.ARCH }}/boot/dtbo.img
         # if-no-files-found: ignore
         # retention-days: 7
          
      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
         token: ${{ secrets.GH_TOKEN }}
         repository: UdyneO2/kernel_realme_RMX2195
         files: |
           ~/Rel/Release-${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}.zip
           ~/Rel/*.zip
         name: Update Kernel Build | ${{ env.ANYKERNEL_NAME }}-${{ matrix.repos.kernelSource.device }}
         tag_name: ${{ env.kernelName }}
         body: |
          ### Release Notes:
          * Kernel compiled using clang 11.0.1
          * flash at your own risk.
          * Thanks [github](https://github.com)
          * Use [branch](https://github.com/UdyneO2/kernel_realme_RMX2195/tree/KSUN)
          
           ### Changelog ;
          * - Add KernelSU-Next v1.0.8 Support
          * - Add Susfs 1.5.8 support : Thanks to [sidex15](https://t.me/sidex15) - [Kernel Source](https://github.com/sidex15/kernel_realme_sm4250)
          * - Enable uclamp
          * - Add more gpucc-size
          * - bugs? tell [me](https://t.me/mnrdnn)

